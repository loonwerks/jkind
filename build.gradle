import java.text.SimpleDateFormat;

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.5'
    }
}

plugins {
    id("com.gradleup.shadow") version "8.3.7"
    id("com.gradleup.nmcp.aggregation").version("0.2.1")
    id("eclipse")
}

def jkind_version_base = '4.6.2-SNAPSHOT'

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMddHHmm");
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

// Compute version number to be included in manifest, code, and publishing
def match = jkind_version_base =~ /([0-9]+\.[0-9]\.[0-9]+).*/
def jkind_version = match[0][1]
if (jkind_version_base.matches("([0-9]+\\.[0-9]+\\.[0-9]+)-SNAPSHOT")) {
    jkind_version = jkind_version + "-" + buildTime()
}
assert jkind_version ==~ /[0-9.\-]+/

nmcpAggregation {
  centralPortal {
    username = System.getenv("MAVEN_CENTRAL_USER")
    password = System.getenv("MAVEN_CENTRAL_TOKEN")
    // publish manually from the portal
    publishingType = "USER_MANAGED"
    // or if you want to publish automatically
    publishingType = "AUTOMATIC"
  }

  // Publish all projects that apply the 'maven-publish' plugin
  publishAllProjectsProbablyBreakingProjectIsolation()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'com.collins.trustedsystems.jkind'

    //dependencies {
    //    implementation files('../jkind-common/dependencies/antlr-runtime-4.4.jar', '../jkind-common/dependencies/jxl.jar')
    //}

    //sourceSets {
    //    main {
    //        java {
    //            srcDirs = ['../jkind-common/src']
    //        }
    //    }
    //}

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        repositories {
            maven {
                name = "GithubPackages"
                if (jkind_version_base.matches("([0-9]+\\.[0-9]+\\.[0-9]+)")) {
                    url = "https://maven.pkg.github.com/loonwerks/jkind/releases/"
                } else if (jkind_version_base.matches("([0-9]+\\.[0-9]+\\.[0-9]+)-SNAPSHOT")) {
                    url = "https://maven.pkg.github.com/loonwerks/jkind/snapshots/"
                } else {
                    url = "https://maven.pkg.github.com/loonwerks/jkind/staging/"
                }
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
}

project(':jkind') {
    repositories {
       flatDir {
           dirs 'dependencies'
       }
    }

    dependencies {
        implementation files('dependencies/commons-cli-1.2.jar', 'dependencies/smtinterpol.jar', '../jkind-common/dependencies/antlr-runtime-4.4.jar', '../jkind-common/dependencies/jxl.jar')
    }

    sourceSets {
        main {
            java {
                srcDirs += ['src', '../jkind-common/src']
            }
            resources {
                srcDirs += ['resources']
            }
        }
    }

    apply plugin: 'com.gradleup.shadow'

    shadowJar {
        archiveClassifier = null // do not append "-all", so the generated shadow jar generates jkind.jar (instead of generating jkind-all.jar)
        // enableRelocation = true
        manifest {
            attributes 'Main-Class': 'jkind.Main',
                'Bundle-Description': 'An infinite-state model checker for safety properties in Lustre',
                'Bundle-License': 'https://github.com/loonwerks/jkind/blob/master/LICENSE',
                'Bundle-SymbolicName': 'com.collins.trustedsystems.jkind',
                'Bundle-Version': jkind_version,
                'Implementation-Version': jkind_version
        }
        from("dependencies/smtinterpol-sources.jar") {
            // Copy SMTinterpol sources into
            into("sources")
        }
    }

    sourcesJar {
        from zipTree('dependencies/smtinterpol-sources.jar')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = 'com.collins.trustedsystems.jkind'
                version = jkind_version
                from components.java
            }
        }
    }
}

project(':jkind-api') {
    repositories {
        mavenCentral()
    }

     dependencies {
        implementation 'org.eclipse.platform:org.eclipse.equinox.common:3.14.0!!'
        implementation 'org.eclipse.platform:org.eclipse.core.runtime:3.20.0!!'
        implementation files('../jkind-common/dependencies/antlr-runtime-4.4.jar', '../jkind-common/dependencies/jxl.jar')
    }

     sourceSets {
        main {
            java {
                srcDirs += ['src', '../jkind-common/src']
            }
            resources {
                srcDirs = ['resources']
            }
        }
    }

    apply plugin: 'com.gradleup.shadow'

    shadowJar {
        archiveClassifier = null // do not append "-all", so the generated shadow jar generates jkind-api.jar (instead of generating jkind-api-all.jar)
        // enableRelocation = true
        manifest {
            attributes 'Main-Class': 'jkind.Main',
                'Bundle-Description': 'An infinite-state model checker for safety properties in Lustre',
                'Bundle-License': 'https://github.com/loonwerks/jkind/blob/master/LICENSE',
                'Bundle-SymbolicName': 'com.collins.trustedsystems.jkind-api',
                'Bundle-Version': jkind_version,
                'Implementation-Version': jkind_version
        }
        from("dependencies/smtinterpol-sources.jar") {
            // Copy SMTinterpol sources into
            into("sources")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = 'com.collins.trustedsystems.jkind-api'
                version = jkind_version
                from components.java
            }
        }
    }
}

task dist(type: Zip) {
    dependsOn 'jkind:shadowJar', 'jkind:sourcesJar', 'jkind-api:jar', 'jkind-api:sourcesJar'
    from ('scripts') {
        include '*'
        exclude '*.bat'
        filePermissions { unix("rwxr-xr-x") }
        into 'jkind'
    }
    from ('scripts') {
        include '*.bat'
        into 'jkind'
    }
    from ('jkind/build/libs') {
         include 'jkind.jar', 'jkind-sources.jar'
         into 'jkind'
    }
    from ('jkind-api/build/libs') {
         include 'jkind-api.jar',  'jkind-api-sources.jar'
         into 'jkind'
    }
    archiveBaseName = 'jkind'
    archiveVersion = jkind_version
}
 
artifacts {
    archives dist
}
