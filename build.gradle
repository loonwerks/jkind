import java.text.SimpleDateFormat;

def jkind_version_base = '4.5.2'

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMddHHmm");
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

// Compute version number to be included in manifest, code, and publishing
def match = jkind_version_base =~ /([0-9]+\.[0-9]\.[0-9]+).*/
def jkind_version = match[0][1]
if (jkind_version_base.matches("([0-9]+\\.[0-9]+\\.[0-9]+)-SNAPSHOT")) {
    jkind_version = jkind_version + "-" + buildTime()
}
assert jkind_version ==~ /[0-9.\-]+/

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.5'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'com.collins.trustedsystems.jkind'

    dependencies {
        implementation files('../jkind-common/dependencies/antlr-runtime-4.4.jar', '../jkind-common/dependencies/jxl.jar')
    }

    sourceSets {
        main {
            java {
                srcDirs = ['../jkind-common/src']
            }
        }
    }

    publishing {
        repositories {
            maven {
                if (jkind_version_base.matches("([0-9]+\\.[0-9]+\\.[0-9]+)")) {
                    url "s3://ca-trustedsystems-dev-us-east-1/mvn/releases/"
                } else if (jkind_version_base.matches("([0-9]+\\.[0-9]+\\.[0-9]+)-SNAPSHOT")) {
                    url "s3://ca-trustedsystems-dev-us-east-1/mvn/snapshots/"
                } else {
                    url "s3://ca-trustedsystems-dev-us-east-1/mvn/staging/"
                }
                authentication {
                    awsIm(AwsImAuthentication)
                }
            }
        }
    }
}

project(':jkind') {
    repositories {
       flatDir {
           dirs 'dependencies'
       }
    }

    dependencies {
        implementation files('dependencies/commons-cli-1.2.jar', 'dependencies/smtinterpol.jar')
    }

    sourceSets {
        main {
            java {
                srcDirs += ['src']
            }
            resources {
                srcDirs += ['resources']
            }
        }
    }

    jar {
        manifest {
            attributes 'Main-Class': 'jkind.Main',
                'Bundle-Description': 'An infinite-state model checker for safety properties in Lustre',
                'Bundle-License': 'https://github.com/loonwerks/jkind/blob/master/LICENSE',
                'Bundle-SymbolicName': 'com.collins.trustedsystems.jkind',
                'Bundle-Version': jkind_version,
                'Implementation-Version': jkind_version
        }
        from sourceSets.main.allSource

        dependsOn configurations.runtimeClasspath
        from (configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }) {
            exclude '.api_description'
            exclude '.options'
            exclude 'about.html'
            exclude 'plugin.properties'
            exclude 'plugin.xml'
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId 'com.collins.trustedsystems.jkind'
                version jkind_version
                from components.java
            }
        }
    }
}

project(':jkind-api') {
    repositories {
        mavenCentral()
    }

     dependencies {
        implementation 'org.eclipse.platform:org.eclipse.equinox.common:3.14.0'
        implementation 'org.eclipse.platform:org.eclipse.core.runtime:3.20.0'
    }

     sourceSets {
        main {
            java {
                srcDirs += ['src']
            }
            resources {
                srcDirs = ['resources']
            }
        }
    }

    jar {
        manifest {
            attributes 'Main-Class': 'jkind.Main',
                'Bundle-Description': 'An infinite-state model checker for safety properties in Lustre',
                'Bundle-License': 'https://github.com/loonwerks/jkind/blob/master/LICENSE',
                'Bundle-SymbolicName': 'com.collins.trustedsystems.jkind-api',
                'Bundle-Version': jkind_version,
                'Implementation-Version': jkind_version
        }
        from sourceSets.main.allSource

        dependsOn configurations.runtimeClasspath
        from (configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }) {
            exclude '.api_description'
            exclude '.options'
            exclude 'about.html'
            exclude 'plugin.properties'
            exclude 'plugin.xml'
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }

        duplicatesStrategy = 'warn'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId 'com.collins.trustedsystems.jkind-api'
                version jkind_version
                from components.java
            }
        }
    }
}

task dist(type: Zip) {
    dependsOn 'jkind-api:jar', 'jkind:jar'
    from ('scripts') {
        include '*'
        exclude '*.bat'
        fileMode 0755
        into 'jkind'
    }
    from ('scripts') {
        include '*.bat'
        into 'jkind'
    }
    from ('jkind/build/libs') {
         include 'jkind.jar'
         into 'jkind'
    }
    from ('jkind-api/build/libs') {
         include 'jkind-api.jar'
         into 'jkind'
    }
    baseName = 'jkind'
    version = jkind_version
}
 
artifacts {
    archives dist
}
